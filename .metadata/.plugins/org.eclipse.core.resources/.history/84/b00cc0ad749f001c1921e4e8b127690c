package com.abc.fundraising;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import com.abc.fundraising.entity.CategoryEntity;
import com.abc.fundraising.exception.CategoryNotFoundException;
import com.abc.fundraising.model.Category;
import com.abc.fundraising.repository.CategoryRepository;
import com.abc.fundraising.service.CategoryService;
import com.abc.fundraising.service.CategoryServiceImpl;
import com.abc.fundraising.util.EntityModelUtil;

@SpringBootTest
public class ServiceTest {

	@InjectMocks
	private CategoryService categoryService = new CategoryServiceImpl();

	@Mock
	private CategoryRepository categoryRepository;
	
	@Mock
	private EntityModelUtil entityModelUtil;

	@Test
	public void testGetCategoryById() {


		Category category = new Category();
		category.setCategoryId(1);
		category.setCategoryName("medical");
		
		Category category2 = new Category();
		category2.setCategoryId(2);
		category2.setCategoryName("education");

		Optional<CategoryEntity> optionalCategory = Optional.of(entityModelUtil.categoryModelToEntity(category));

		int categoryId = 1;

		when(categoryRepository.findById(1)).thenReturn(optionalCategory);

		entityModelUtil.categoryEntityToModel(optionalCategory.get());

		Category existingCategory = categoryService.getCategoryById(categoryId);
		
		assertEquals("medical",existingCategory.getCategoryName());

	}

	@Test
	public void testGetCategoryByIdNotFound() {

		int categoryId = 200;

		when(categoryRepository.findById(categoryId)).thenThrow(CategoryNotFoundException.class);

		assertThrows(CategoryNotFoundException.class, () -> categoryService.getCategoryById(categoryId));

	}

	@Test
	public void testSaveCategory() {

		CategoryEntity c = new CategoryEntity();
		c.setCategoryId(10);
		c.setCategoryName("medical");
		
		Category category = new Category();
		category.setCategoryId(10);
		category.setCategoryName("medical");

		when(entityModelUtil.categoryModelToEntity(category)).thenReturn(c);
		when(entityModelUtil.categoryEntityToModel(c)).thenReturn(category);
		when(categoryRepository.save(c)).thenReturn(c);

		assertEquals(c.getCategoryName(),category.getCategoryName());
		assertEquals(c.getCategoryId(),category.getCategoryId());
		
		

	}

	@Test
	public void deleteCategoryById() {

		int categoryId = 222;

		CategoryEntity category = new CategoryEntity();

		category.setCategoryId(222);
		category.setCategoryName("dummyname");

		Optional<CategoryEntity> optionalCategory = Optional.of(category);

		when(categoryRepository.findById(222)).thenReturn(optionalCategory);

		categoryService.deleteCategory(category.getCategoryId());

		verify(categoryRepository, times(1)).deleteById(categoryId);
	}

	@Test
	public void allCategoryTest() {

		Category category = new Category();
		category.setCategoryId(5);
		category.setCategoryName("medical");

		Category category2 = new Category();
		category2.setCategoryId(8);
		category2.setCategoryName("education");

		List<CategoryEntity> categories = new ArrayList<>();

		when(categoryRepository.findAll()).thenReturn(categories);

		List<Category> expList = entityModelUtil.categoryEntityToModelList(categories);

		List<Category> newList = categoryService.getAllCategory();

		assertEquals(newList, expList);
	}

	@Test
	public void updateOfCategory() {
		
		CategoryEntity categoryEntity = new CategoryEntity();

		Category category = new Category();
		  category.setCategoryId(2);
		  category.setCategoryName("medical");
		  
		  
		  
		  Optional<CategoryEntity> optionalCategory = Optional.of(categoryEntity);
		  
		  when(categoryRepository.findById(2)).thenReturn(optionalCategory);
		  
		  CategoryEntity updatedCategoryEntity = categoryRepository.save(entityModelUtil.categoryModelToEntity(category));

		  entityModelUtil.categoryEntityToModel(updatedCategoryEntity);
		  categoryService.updateCategory(category);
		  
		  verify(categoryRepository, times(1)).save(entityModelUtil.categoryModelToEntity(category));
	}

}
